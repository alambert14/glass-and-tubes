#!/usr/bin/env python3

from random import randint
from loop import *
from edge import *
from segment import *
from grid import *


#input:
#starting point, list of nodes to hit
#output:
#a new loop
def find_path(start_pt, nodes):
	list_of_segments = []
	list_of_edges = []
	current_pt = start_pt
	for node in nodes:
		new_edge = Edge()
		new_edge.add_segment(Segment(current_pt,(current_pt[0],node[1])))
		new_edge.add_segment(Segment((current_pt[0],node[1]), node))
		current_pt = node
	list_of_edges[0].add_segment(Segment(current_pt,(current_pt[0],start_pt[1])))
	list_of_edges[0].add_segment(append(Segment((current_pt[0],start_pt[1]), start_pt))
	return Loop(list_of_edges)

n = 0
max_n = 5

current_loop = None
last_loop = None
graveyard = []

h = 512
w = 512
init_sq_size = 128
while(n < 100):
	#if it is the first iteration, just make one loop in a random position (initialize the lists)

	#L1 graveyard (what will be printed in the end): Store all of the segments((x,y),(x,y)))
	#L2 just the last loop: [edges[segments(p1,p2)]]
	#L3 current loop: [edges[segments(p1,p2)]]

	if n == 0:
		current_loop = Loop()
		current_loop.add_edge(Edge())
		current_loop.edges[0].add_segment(Segment(((w/2-init_sq_size/2),(h/2-init_sq_size/2)),((w/2+init_sq_size/2),(h/2-init_sq_size/2)))) #top
		current_loop.edges[0].add_segment(Segment(((w/2-init_sq_size/2),(h/2-init_sq_size/2)),((w/2-init_sq_size/2),(h/2+init_sq_size/2)))) #left
		current_loop.edges[0].add_segment(Segment(((w/2-init_sq_size/2),(h/2+init_sq_size/2)),((w/2+init_sq_size/2),(h/2+init_sq_size/2)))) #bottom
		current_loop.edges[0].add_segment(Segment(((w/2+init_sq_size/2),(h/2+init_sq_size/2)),((w/2+init_sq_size/2),(h/2-init_sq_size/2)))) #right
		last_loop = current_loop

		for edge in current_loop.edges:
			for seg in edge.segments:
				graveyard.append(seg)

	else:
		#a list of points
		nodes = []
		for edge in previous_loop.edges:
			nodes.append(edge.segments[0].bisection()
		
		current_loop = find_path((randint(0,w),randint(0,h))
		
		for edge in previous_loop.edges:
			for seg in edge.segments:
				graveyard.append(seg)
		previous_loop = current_loop
		

print(graveyard)
		


def draw_segments(segs):
	



 			   
